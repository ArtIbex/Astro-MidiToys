---
import "../css/global.css";
import ChannelSettingsContainer from "../components/ChannelSettingsContainer";
---

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>MIDI Toys</title>
</head>
<body>


<!-- MIDI Toys Setup -->
<script>
    //Import
    import { InputManager } from "../js/input/InputManager";
    import { ToyManager } from "../js/miditoy/ToyManager";

    import * as paper from "paper";
    
    //Base Toys setup
    let toyCanvas = document.getElementById("toyCanvas") as HTMLCanvasElement; //Get target Canvas
    paper.setup(toyCanvas); //Paper setup
    
    let inputManager = new InputManager(); //Setup input manager
    let toyManager = new ToyManager(); //Setup toy manager
    toyManager.SetTargetCanvas(toyCanvas); //Set the target
    toyManager.CreateEmptyToys();

    let frameCounter = 0;
    let updateFrequency = 1;
    paper.view.onFrame = function(event) {
        frameCounter++;

        if (frameCounter >= updateFrequency) {
            frameCounter = 0;
            toyManager.UpdateToys(); //Update all keyboards, 60 times a second
        }
    }
</script>

<!-- Open SettingsPanel -->
<script>
    import { AnimationCollection } from "../js/AnimationCollection";

    const settingsPanel = document.getElementById("settingsPanel");
    const openSettingsBtn = document.getElementById("openSettingsBtn");
    const closeBtn = document.querySelector('#closeButton');

    const CloseSettings = () => settingsPanel.style.display = "none";
    function OpenSettings() {
        settingsPanel.style.display = "block";
        HideOpenSettingsBtn();
    }

    const ShowOpenSettingsBtn = () => openSettingsBtn.style.display = "block";
    const HideOpenSettingsBtn = () => openSettingsBtn.style.display = "none";

    document.addEventListener("mousemove", (event) => {
        if (event.clientY > window.innerHeight / 2) {
            HideOpenSettingsBtn();
            // CloseSettings();
        } else { 
            let calc = settingsPanel.style.left + settingsPanel.style.padding;
            settingsPanel.style.width = `${window.innerWidth - 150}px`;
            if(settingsPanel.style.display != "block") ShowOpenSettingsBtn();
            //OpenSettings();
        }
    });
    openSettingsBtn.addEventListener("click", () => {
        if(settingsPanel.style.display == "none") {
            AnimationCollection.AnimateFromTop(settingsPanel, 50);
            OpenSettings();
        }
        else CloseSettings();
    });
    closeBtn.addEventListener("click", CloseSettings);

</script>

<!-- ContainerGroups Controls -->
<script>
    const containerGroups = document.querySelectorAll('.channelGroup');
    const prevButton = document.querySelector('#prevButton');
    const nextButton = document.querySelector('#nextButton');
    let currentIndex = 0;

    function showContainers(index) {
    // Hide all container groups
    containerGroups.forEach(group => {
        var g = group as HTMLElement;
        g.style.display = "none";
    });
        // Show the current set of containers
        var g = containerGroups[index] as HTMLElement;
        g.style.display = "grid";
    }

    prevButton.addEventListener('click', () => {
        // Decrement the index and show the new set of containers
        currentIndex--;
            if (currentIndex < 0) {
                currentIndex = containerGroups.length - 1;
            }
        showContainers(currentIndex);
    });
    nextButton.addEventListener('click', () => {
        // Increment the index and show the new set of containers
        currentIndex++;
            if (currentIndex >= containerGroups.length) {
                currentIndex = 0;
            }
        showContainers(currentIndex);
    });
</script>

<canvas id="toyCanvas" class="toyCanvas"></canvas>
<button id="openSettingsBtn">Settings</button>

<div id="settingsPanel">
    <div id="buttonSettingsGroup">
        <button id="closeButton">X</button>
        <button id="prevButton" class="marginLeft10">Prev</button>
        <button id="nextButton">Next</button>
        <h2 class="marginLeft20">MIDI Toy Settings</h2>
    </div>
    <br>
    
    <div class="channelGroup">
        <ChannelSettingsContainer channel={1} client:load />
        <ChannelSettingsContainer channel={2} client:load />
        <ChannelSettingsContainer channel={3} client:load />
        <ChannelSettingsContainer channel={4} client:load />
    </div>
    <div class="channelGroup" style="display:none;">
        <ChannelSettingsContainer channel={5} client:load />
        <ChannelSettingsContainer channel={6} client:load />
        <ChannelSettingsContainer channel={7} client:load />
        <ChannelSettingsContainer channel={8} client:load />
    </div>
    <div class="channelGroup" style="display:none;">
        <ChannelSettingsContainer channel={9} client:load />
        <ChannelSettingsContainer channel={10} client:load />
        <ChannelSettingsContainer channel={11} client:load />
        <ChannelSettingsContainer channel={12} client:load />
    </div>
    <div class="channelGroup" style="display:none;">
        <ChannelSettingsContainer channel={13} client:load />
        <ChannelSettingsContainer channel={14} client:load />
        <ChannelSettingsContainer channel={15} client:load />
        <ChannelSettingsContainer channel={16} client:load />
    </div>
</div>


<footer>
    <p>Copyright Â© 2023 Korbinian Maag</p>
</footer>

</body>
</html>