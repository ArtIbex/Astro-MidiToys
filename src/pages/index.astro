---
import "../css/global.css";
import ChannelSettingsContainer from "../components/ChannelSettingsContainer";
---

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>MIDI Toys</title>
</head>
<body>


<!-- MIDI Toys Setup -->
<script>
    //Import
    import { InputManager } from "../js/input/InputManager";
    import { ToyManager } from "../js/miditoy/ToyManager";
    import { SquareKeyboard } from "../js/miditoy/SquareKeyboard";
    import { MusicBalls } from "../js/miditoy/MusicBalls";
    import { DrumMaschin } from "../js/miditoy/DrumMaschin";

    import * as paper from "paper";
    
    //Base Toys setup
    let toyCanvas = document.getElementById("toyCanvas") as HTMLCanvasElement; //Get target Canvas
    paper.setup(toyCanvas); //Paper setup
    
    let inputManager = InputManager.GetInstance(); //Setup input manager
    let toyManager = new ToyManager(); //Setup toy manager
    toyManager.SetTargetCanvas(toyCanvas); //Set the target
    
    let channel1Toy;
    let channel2Toy;
    let channel3Toy;
    let channel4Toy;

    //If browser window
    if (typeof window !== 'undefined') {
        toyManager.SetupMusicBalls(1, 13.3, 12);
        // toyManager.channel1Toy = new MusicBalls(toyCanvas, 1, 13*3, 12);
        // channel1Toy = new DrumMaschin(toyCanvas, 15, 6, 60);
        // channel2Toy = new MusicBalls(toyCanvas, 1, 13*3, 12);
        // channel3Toy = new SquareKeyboard(toyCanvas, 2, 60, 12);

        paper.view.onFrame = function(event) {
            toyManager.UpdateToys(); //Update all keyboards, 60 times a second
        }
    }

    // UpdateToyNames();
    // function UpdateToyNames () {
    //     document.getElementById("toyName1").innerHTML = toyManager.GetToyType(1);
    //     // document.getElementById("toyName2").innerHTML = toyManager.GetToyType(2);
    //     // document.getElementById("toyName3").innerHTML = toyManager.GetToyType(3);
    //     // document.getElementById("toyName4").innerHTML = toyManager.GetToyType(4);
    // }

</script>

<!-- Open SettingsPanel -->
<script>
    import { AnimationCollection } from "../js/AnimationCollection";

    const settingsPanel = document.getElementById("settingsPanel");
    const openSettingsBtn = document.getElementById("openSettingsBtn");

    document.addEventListener("mousemove", (event) => {
        if (event.clientY > window.innerHeight / 2) {
            openSettingsBtn.style.display = "none";
            settingsPanel.style.display = "none";
        } else {
            let calc = settingsPanel.style.left + settingsPanel.style.padding;
            settingsPanel.style.width = `${window.innerWidth - 150}px`;
            openSettingsBtn.style.display = "block";
        }
    });
    openSettingsBtn.addEventListener("click", () => {
        if(settingsPanel.style.display == "none") {
            AnimationCollection.AnimateFromTop(settingsPanel, 50);
            settingsPanel.style.display = "block";
        }
        else settingsPanel.style.display = "none";
    });
</script>

<!-- ContainerGroups Controls -->
<script>
    const containerGroups = document.querySelectorAll('.channelGroup');
    const prevButton = document.querySelector('#prevButton');
    const nextButton = document.querySelector('#nextButton');
    let currentIndex = 0;

    function showContainers(index) {
    // Hide all container groups
    containerGroups.forEach(group => {
        var g = group as HTMLElement;
        g.style.display = "none";
    });
        // Show the current set of containers
        var g = containerGroups[index] as HTMLElement;
        g.style.display = "grid";
    }

    prevButton.addEventListener('click', () => {
        // Decrement the index and show the new set of containers
        currentIndex--;
            if (currentIndex < 0) {
                currentIndex = containerGroups.length - 1;
            }
        showContainers(currentIndex);
    });
    nextButton.addEventListener('click', () => {
        // Increment the index and show the new set of containers
        currentIndex++;
            if (currentIndex >= containerGroups.length) {
                currentIndex = 0;
            }
        showContainers(currentIndex);
    });
</script>

<canvas id="toyCanvas" class="toyCanvas"></canvas>
<button id="openSettingsBtn">Settings</button>

<div id="settingsPanel">
    <div id="buttonSettingsGroup">
        <button id="prevButton">Prev</button>
        <button class="marginLeft10" id="nextButton">Next</button>
        <h1 class="marginLeft20">Channel Settings</h1>
    </div>

    <br>
    
    <div class="channelGroup">
        <ChannelSettingsContainer toyName="Test" channel={1} client:load />
    </div>
    <div class="channelGroup" style="display:none;">
    </div>
    <div class="channelGroup" style="display:none;">
    </div>
    <div class="channelGroup" style="display:none;">
    </div>
    <!-- Settings content goes here -->
</div>

<footer>
    <p>Copyright Â© 2023 Korbinian Maag</p>
</footer>

</body>
</html>